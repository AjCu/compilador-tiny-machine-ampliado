package comp;

import java_cup.runtime.*;
import comp.nodosAST.*;
import java.io.InputStreamReader;
import java.util.Hashtable;


parser code {:

/***********
SymbolFactory es una nueva caracteristica que ha sido a�adida a las version 11a de cup, la cual facilita la implementacion de clases Symbol personalizadas
, esto debido a que dicha clase no provee mucha informaci�n de contexto que podria ser util para el analisis semantico o ayudar en la construccion del AST
Mas informacion en: http//4thmouse.com/index.php/2007/02/15/using-custom-symbols-in-cup/
***********/
	public static void main(String args[]) throws Exception {
		SymbolFactory sf = new DefaultSymbolFactory();
		parser parser_obj;
		if (args.length==0) 
			parser_obj=new parser(new Lexico(new InputStreamReader(System.in),sf),sf);
		else
			parser_obj=new parser(new Lexico(new InputStreamReader(new java.io.FileInputStream(args[0])),sf),sf);

		parser_obj.parse();
		NodoBase root=parser_obj.action_obj.getASTroot();
		System.out.println();
		System.out.println("IMPRESION DEL AST GENERADO");
		System.out.println();
        Util.imprimirAST(root);
		TablaSimbolos ts = new TablaSimbolos();
		ts.cargarTabla(root);
		ts.ImprimirClaves();
		Generador.setTablaSimbolos(ts);
		Generador.generarCodigoObjeto(root);
	}

:}

action code {:
	private boolean debug=true;
	private NodoBase ast=null;
	private int lineanum=0;
	Hashtable table = new Hashtable(); //Se guardan todas las declaraciones de variables;
	//Debe ser llamada solo despues de un parse(), en caso contrario retornara null siempre;
	public NodoBase getASTroot(){
		return ast;
	}
	public void syntax_error(String token) throws Exception {
			parser lr_par = new parser();
			lr_par.done_parsing();
			lr_par.report_error("Variable "+ token+ " no declarada  ", token);
		throw new Exception("Error de Sintaxis");
     }
	
:}

/* Simbolos Terminales */

terminal IF;
terminal THEN;
terminal ELSE;
terminal END;
terminal REPEAT;
terminal UNTIL;
terminal FOR;
terminal READ;
terminal WRITE;
terminal String ID;
terminal String NUM;
terminal ASSIGN;
terminal EQ;
terminal LT;
terminal GT;
terminal LE;
terminal GE;
terminal NE;
terminal AND;
terminal OR;
terminal NOT;
terminal PLUS;
terminal MINUS;
terminal TIMES;
terminal OVER;
terminal LPAREN;
terminal RPAREN;
terminal LBRACKET;
terminal RBRACKET;
terminal SEMI;
terminal VARINT;
terminal VARBOOL;
terminal VECTOR;


/* Simbolos No Terminales */
non terminal program;
non terminal NodoBase stmt_seq;
non terminal NodoBase stmt;
non terminal NodoBase if_stmt;
non terminal NodoBase repeat_stmt;
non terminal NodoBase for_stmt;
non terminal NodoBase assign_stmt;
non terminal NodoBase read_stmt;
non terminal NodoBase write_stmt;
non terminal NodoBase exp;
non terminal NodoBase exp_log;
non terminal NodoBase exp_not;
non terminal NodoBase simple_exp;
non terminal NodoBase term;
non terminal NodoBase factor;
non terminal NodoBase iden;
non terminal NodoBase decl_vect;

/* Precedencia de operadores */
precedence left PLUS;
precedence left MINUS;
precedence left TIMES;


/* REGLAS GRAMATICALES */
program     ::= stmt_seq:s	{: if(debug) System.out.println("\t regla 1"); 
					ast = s;
					:}
		;

stmt_seq    ::= stmt_seq:ini SEMI stmt:sent	{: if(debug) System.out.println("\t regla 2a"); 
						NodoBase hijoActual = ini;
						if(hijoActual !=null){
							while(hijoActual.TieneHermano()){
								hijoActual = hijoActual.getHermanoDerecha();
							}
							hijoActual.setHermanoDerecha(sent);
							RESULT=ini;
						}else{
							RESULT=sent;
						}
						:}
            | stmt:sent	{: if(debug) System.out.println("\t regla 2b"); 
				RESULT=sent;				
				:}
		;

stmt        ::= if_stmt:sif	{: if(debug) System.out.println("\t regla 3a"); 
					RESULT=sif;
					:}
            | repeat_stmt:srep	{: if(debug) System.out.println("\t regla 3b"); 
						RESULT=srep;
						:}
			| for_stmt:sfor	{: if(debug) System.out.println("\t regla 3c");
                        RESULT=sfor;
                        :}			
            | assign_stmt:sasi	{: if(debug) System.out.println("\t regla 3d"); 
						RESULT=sasi;
						:}
            | read_stmt:slec	{: if(debug) System.out.println("\t regla 3e"); 
					RESULT=slec;
					:}
            | write_stmt:sesc	{: if(debug) System.out.println("\t regla 3f"); 
					RESULT=sesc;
					:}
            | decl_vect:deve	{: if(debug) System.out.println("\t regla 3g"); 
					RESULT=deve;
					:}
            | error	{: if(debug) System.out.println("\t regla 3h"); 
				System.out.println("Ocurrio error en cup # 0004");
				RESULT=null;
				:}
            ;

if_stmt     ::= IF exp_log:ex THEN stmt_seq:pthen END	{: if(debug) System.out.println("\t regla 4a"); 
		RESULT = new NodoIf(ex,pthen);
		:}
		| IF exp_log:ex THEN stmt_seq:pthen ELSE stmt_seq:pelse END	{: if(debug) System.out.println("\t regla 4b"); 
		RESULT = new NodoIf(ex,pthen,pelse);		
		:}
		;

repeat_stmt ::= REPEAT stmt_seq:cuerpo UNTIL exp:prueba	{: if(debug) System.out.println("\t regla 5"); 
							RESULT = new NodoRepeat(cuerpo,prueba);
							:}
		;

for_stmt ::= FOR assign_stmt:asignap SEMI exp:prueba SEMI assign_stmt:asignat SEMI  THEN stmt_seq:cuerpo END  {:
                            if(debug) System.out.println("\t regla 6");
   							RESULT = new NodoFor(asignap,prueba,asignat,cuerpo);
  					:}
   		;

assign_stmt ::= VARINT:var ID:variable 	{: if(debug) System.out.println("\t regla 7a varint");
                				table.put(variable,variable);
                				:}
                    | VARINT:var ID:variable ASSIGN exp_log:ex {:
                            if(debug) System.out.println("\t regla 7b varint");
                            if(variable!=null){
                            table.put(variable,variable);
                            RESULT = new NodoAsignacionSimple(variable.toString(),ex);
                            }
                            else{
                            RESULT = null;
                            System.out.println("Ocurrio error en cup # 0001");
                            }
                    :}
					| VARBOOL:var ID:variable 	{: if(debug) System.out.println("\t regla 7b varbool");
                				table.put(variable,variable);
                				:}
                    | VARBOOL:var ID:variable ASSIGN exp_log:ex {:
                            if(debug) System.out.println("\t regla 7b varbool con asignacion");
                            if(variable!=null){
                            table.put(variable,variable);
                            RESULT = new NodoAsignacionSimple(variable.toString(),ex);
                            }
                            else{
                            RESULT = null;
                            System.out.println("Ocurrio error en cup # 0001");
                            }
                    :}
					| iden:variable ASSIGN exp:ex	{: if(debug) System.out.println("\t regla 7c identificador");
							if(variable!=null)
							RESULT = new NodoAsignacionComplex(variable,ex);
							else{
							RESULT = null;
							System.out.println("Ocurrio error en cup # 0001");
							}
					:}
		;

read_stmt   ::= READ iden:variable	{: if(debug) System.out.println("\t regla 8 read"); 
					System.out.println("Leyendo Variable");
					if(variable!=null)
					RESULT = new NodoLeerComplex(variable);
					else{
					RESULT = null;
					System.out.println("Ocurrio error en cup # 0002");
					}
					:}
		;

write_stmt  ::= WRITE exp:ex	{: if(debug) System.out.println("\t regla 9 write"); 
					RESULT= new NodoEscribir(ex);
					:}
		;

exp_log ::=
    exp_not:exI AND exp_log:exD {:
            if(debug) System.out.println("\t regla 10a op AND");
            RESULT = new NodoOperacion(exI, tipoOp.and, exD);
        :}
    | exp_not:exI OR exp_log:exD {:
            if(debug) System.out.println("\t regla 10b op OR");
            RESULT = new NodoOperacion(exI, tipoOp.or, exD);
        :}
    | exp_not:ex {: RESULT = ex; :}
    ;

exp_not ::=
    NOT exp_not:ex {:
            if(debug) System.out.println("\t regla 11a op NOT");
           RESULT = new NodoOperacionNot(tipoOp.not, ex);
        :}
    | exp:ex {: if(debug) System.out.println("\t regla 11b exp");
            RESULT = ex;
        :}
;

exp          ::= simple_exp:exI LT simple_exp:exD	{: if(debug) System.out.println("\t regla 12a LT"); 
							RESULT = new NodoOperacion(exI,tipoOp.menor,exD);
							:} 
		| simple_exp:exI GT simple_exp:exD	{: if(debug) System.out.println("\t regla 12b GT"); 
							RESULT = new NodoOperacion(exI,tipoOp.mayor,exD);
							:}
		| simple_exp:exI LE simple_exp:exD	{: if(debug) System.out.println("\t regla 12c LE"); 
							RESULT = new NodoOperacion(exI,tipoOp.menorigual,exD);
							:}
		| simple_exp:exI GE simple_exp:exD	{: if(debug) System.out.println("\t regla 12d GE"); 
							RESULT = new NodoOperacion(exI,tipoOp.mayorigual,exD);
							:}
		| simple_exp:exI NE simple_exp:exD	{: if(debug) System.out.println("\t regla 12e NE"); 
							RESULT = new NodoOperacion(exI,tipoOp.diferente,exD);
							:}
		| simple_exp:exI EQ simple_exp:exD	{: if(debug) System.out.println("\t regla 12f EQ"); 
							RESULT = new NodoOperacion(exI,tipoOp.igual,exD);
							:}
		| simple_exp:ex	{: if(debug) System.out.println("\t regla 12j simple_exp"); 
					RESULT = ex;
					:}
		;

simple_exp  ::= simple_exp:exI PLUS term:exD	{: if(debug) System.out.println("\t regla 13a PLUS"); 
							RESULT = new NodoOperacion(exI,tipoOp.mas,exD);
							:}
		| simple_exp:exI MINUS term:exD	{: if(debug) System.out.println("\t regla 13b MINUS"); 
							RESULT = new NodoOperacion(exI,tipoOp.menos,exD);
							:}
		| term:ex	{: if(debug) System.out.println("\t regla 13c term"); 
				RESULT=ex;
				:}
		;

term        ::= term:exI TIMES factor:exD	{: if(debug) System.out.println("\t regla 14a TIMES"); 
							RESULT = new NodoOperacion(exI,tipoOp.por,exD);
							:}
		| term:exI OVER factor:exD	{: if(debug) System.out.println("\t regla 14b OVER"); 
						RESULT = new NodoOperacion(exI,tipoOp.entre,exD);
						:}
		| factor:ex	{: if(debug) System.out.println("\t regla 14c factor"); 
					RESULT=ex;
					:}
		;

factor      ::= LPAREN exp:ex RPAREN	{: if(debug) System.out.println("\t regla 15a Parentesis"); 
							RESULT = ex;
							:}			
		| NUM:valor	{: if(debug) System.out.println("\t regla 15b NUMERO"); 
					System.out.println("Devolvi nodo numero entero");
					if(valor!=null){
						RESULT= new NodoValor(Integer.parseInt(valor));
					}else{
						RESULT = null;
						System.out.println("Ocurrio error en cup # 0005");
					}
					:}
		| iden:id   {: if(debug) System.out.println("\t regla 15c identificador");
					RESULT = id;
					:}			
		| error	{: if(debug) System.out.println("\t regla 15e"); 
				System.out.println("Ocurrio error en cup # 0003");
				RESULT=null;
				:}
		;

iden ::= ID:variable LBRACKET simple_exp:ex RBRACKET  {:  if(debug) System.out.println("\t regla 16a VECTOR");
							if (variable != null && ex != null)
								RESULT = new NodoVector(new NodoIdentificador(variable.toString()),ex);
							else{
								RESULT = null;
								System.out.println("Ocurrio error en cup # 0005");
							}
						:}
        | ID:variable {:    if(debug) System.out.println("\t regla 16b VARIABLE");
                            if(variable!=null){
								 if(variable.toString().equals("true")) {
									RESULT = new NodoValor(1);
								} else if(variable.toString().equals("false")) {
									RESULT = new NodoValor(0);
								}  else {
									System.out.println("Construyendo Nodo ID para Lexema: "+ variable.toString());
									RESULT= new NodoIdentificador(variable.toString());
								}
                            } else {
                                RESULT = null;
                                System.out.println("Ocurrio error en cup # 0005");
                            }
                        :}
;

decl_vect ::= VECTOR ID:id NUM:num  {:  if(debug) System.out.println("\t regla 17a INIT VECTOR");
                                        if (id != null && num != null){
                                         NodoVector vector = new NodoVector(new NodoIdentificador(id.toString()),new NodoValor(Integer.parseInt(num)));
                                        vector.setDeclaracion(true);
                                        System.out.println("Devuelve un nodo vector");
                                        RESULT = vector;
                                        }else{
                                            RESULT = null;
                                            System.out.println("Ocurrio error en cup # 00017");
                                        }
                                    :}
;